// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.Steamworks.subsystems;

import org.usfirst.frc6133.Steamworks.RobotMap;
import org.usfirst.frc6133.Steamworks.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {

    private final CANTalon leftMotor1 = RobotMap.drivetrainLeftMotor1;
    private final CANTalon leftMotor2 = RobotMap.drivetrainLeftMotor2;
    private final CANTalon leftMotor3 = RobotMap.drivetrainLeftMotor3;
    private final CANTalon rightMotor1 = RobotMap.drivetrainRightMotor1;
    private final CANTalon rightMotor2 = RobotMap.drivetrainRightMotor2;
    private final CANTalon rightMotor3 = RobotMap.drivetrainRightMotor3;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;

    private double moveValue;
    private double rotateValue;


    public void initDefaultCommand() {
        setDefaultCommand(new JoyDrive());
    }
    
    //Called in the initialize phase of JoyDrive command.
    //It sets the secondary drive motors to "follower" mode so that they can mimic the main drive motors
    public void initFollower() {
    	leftMotor2.changeControlMode(TalonControlMode.Follower);
        leftMotor3.changeControlMode(TalonControlMode.Follower);
        rightMotor2.changeControlMode(TalonControlMode.Follower);
        rightMotor3.changeControlMode(TalonControlMode.Follower);
    }
    
    public void stop() {
    	robotDrive.drive(0, 0);
    }
    
    public void takeJoystickInputs(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(1) * joystick.getRawAxis(3);
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = joystick.getRawAxis(3) * Math.pow(joystick.getRawAxis(2),3);
    	rotateValue *= joystick.getRawAxis(3) > 0 ? 1 : -1;
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    
    public void takeJoystickInputs2(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(1) * (joystick.getRawAxis(3)+1)/2;
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = (joystick.getRawAxis(3)+1)/2 * Math.pow(joystick.getRawAxis(2),3);
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    
    public void takeJoystickInputs3(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(2)*-1+ joystick.getRawAxis(3);
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = joystick.getRawAxis(0);
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    

}

