// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.Steamworks.subsystems;

import org.usfirst.frc6133.Steamworks.RobotMap;
import org.usfirst.frc6133.Steamworks.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftMotor1 = RobotMap.drivetrainLeftMotor1;
    private final CANTalon leftMotor2 = RobotMap.drivetrainLeftMotor2;
    private final CANTalon leftMotor3 = RobotMap.drivetrainLeftMotor3;
    private final CANTalon rightMotor1 = RobotMap.drivetrainRightMotor1;
    private final CANTalon rightMotor2 = RobotMap.drivetrainLeftMotor2;
    private final CANTalon rightMotor3 = RobotMap.drivetrainLeftMotor3;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoyDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void initFollower() {
    	leftMotor2.changeControlMode(TalonControlMode.Follower);
        leftMotor3.changeControlMode(TalonControlMode.Follower);
        rightMotor2.changeControlMode(TalonControlMode.Follower);
        rightMotor3.changeControlMode(TalonControlMode.Follower);
    }
    
    public void stop() {
    	robotDrive.drive(0, 0);
    }
    
    public void takeJoystickInputs(GenericHID joystick) {
    	
    	robotDrive.arcadeDrive(joystick, true);
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    

}

