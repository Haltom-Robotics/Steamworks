// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.Steamworks.subsystems;

import org.usfirst.frc6133.Steamworks.Robot;
import org.usfirst.frc6133.Steamworks.RobotMap;
import org.usfirst.frc6133.Steamworks.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Drivetrain extends Subsystem {

    private final CANTalon leftMotor1 = RobotMap.drivetrainLeftMotor1;
    private final CANTalon leftMotor2 = RobotMap.drivetrainLeftMotor2;
    private final CANTalon leftMotor3 = RobotMap.drivetrainLeftMotor3;
    private final CANTalon rightMotor1 = RobotMap.drivetrainRightMotor1;
    private final CANTalon rightMotor2 = RobotMap.drivetrainRightMotor2;
    private final CANTalon rightMotor3 = RobotMap.drivetrainRightMotor3;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
    private final AHRS ahrs = Robot.ahrs;

    private double moveValue;
    private double rotateValue;


    public void initDefaultCommand() {
        setDefaultCommand(new JoyDrive());
    }
    
    //Called in the initialize phase of JoyDrive command.
    //It sets the secondary drive motors to "follower" mode so that they can mimic the main drive motors
    public void initFollower() {
    	leftMotor2.changeControlMode(TalonControlMode.Follower);
        leftMotor3.changeControlMode(TalonControlMode.Follower);
        rightMotor2.changeControlMode(TalonControlMode.Follower);
        rightMotor3.changeControlMode(TalonControlMode.Follower);
    }
    
    public void DataMonitor(Joystick stick) {
    	boolean zero_yaw_pressed = stick.getTrigger();
        if ( zero_yaw_pressed ) {
            ahrs.zeroYaw();
        }

        /* Display 6-axis Processed Angle Data                                      */
        SmartDashboard.putBoolean(  "IMU_Connected",        ahrs.isConnected());
        SmartDashboard.putBoolean(  "IMU_IsCalibrating",    ahrs.isCalibrating());
        SmartDashboard.putNumber(   "IMU_Yaw",              ahrs.getYaw());
        SmartDashboard.putNumber(   "IMU_Pitch",            ahrs.getPitch());
        SmartDashboard.putNumber(   "IMU_Roll",             ahrs.getRoll());
        
        /* Display tilt-corrected, Magnetometer-based heading (requires             */
        /* magnetometer calibration to be useful)                                   */
        
        SmartDashboard.putNumber(   "IMU_CompassHeading",   ahrs.getCompassHeading());
        
        /* Display 9-axis Heading (requires magnetometer calibration to be useful)  */
        SmartDashboard.putNumber(   "IMU_FusedHeading",     ahrs.getFusedHeading());

        /* These functions are compatible w/the WPI Gyro Class, providing a simple  */
        /* path for upgrading from the Kit-of-Parts gyro to the navx MXP            */
        
        SmartDashboard.putNumber(   "IMU_TotalYaw",         ahrs.getAngle());
        SmartDashboard.putNumber(   "IMU_YawRateDPS",       ahrs.getRate());

        /* Display Processed Acceleration Data (Linear Acceleration, Motion Detect) */
        
        SmartDashboard.putNumber(   "IMU_Accel_X",          ahrs.getWorldLinearAccelX());
        SmartDashboard.putNumber(   "IMU_Accel_Y",          ahrs.getWorldLinearAccelY());
        SmartDashboard.putBoolean(  "IMU_IsMoving",         ahrs.isMoving());
        SmartDashboard.putBoolean(  "IMU_IsRotating",       ahrs.isRotating());

        /* Display estimates of velocity/displacement.  Note that these values are  */
        /* not expected to be accurate enough for estimating robot position on a    */
        /* FIRST FRC Robotics Field, due to accelerometer noise and the compounding */
        /* of these errors due to single (velocity) integration and especially      */
        /* double (displacement) integration.                                       */
        
        SmartDashboard.putNumber(   "Velocity_X",           ahrs.getVelocityX());
        SmartDashboard.putNumber(   "Velocity_Y",           ahrs.getVelocityY());
        SmartDashboard.putNumber(   "Displacement_X",       ahrs.getDisplacementX());
        SmartDashboard.putNumber(   "Displacement_Y",       ahrs.getDisplacementY());
        
        /* Display Raw Gyro/Accelerometer/Magnetometer Values                       */
        /* NOTE:  These values are not normally necessary, but are made available   */
        /* for advanced users.  Before using this data, please consider whether     */
        /* the processed data (see above) will suit your needs.                     */
        
        SmartDashboard.putNumber(   "RawGyro_X",            ahrs.getRawGyroX());
        SmartDashboard.putNumber(   "RawGyro_Y",            ahrs.getRawGyroY());
        SmartDashboard.putNumber(   "RawGyro_Z",            ahrs.getRawGyroZ());
        SmartDashboard.putNumber(   "RawAccel_X",           ahrs.getRawAccelX());
        SmartDashboard.putNumber(   "RawAccel_Y",           ahrs.getRawAccelY());
        SmartDashboard.putNumber(   "RawAccel_Z",           ahrs.getRawAccelZ());
        SmartDashboard.putNumber(   "RawMag_X",             ahrs.getRawMagX());
        SmartDashboard.putNumber(   "RawMag_Y",             ahrs.getRawMagY());
        SmartDashboard.putNumber(   "RawMag_Z",             ahrs.getRawMagZ());
        SmartDashboard.putNumber(   "IMU_Temp_C",           ahrs.getTempC());
        SmartDashboard.putNumber(   "IMU_Timestamp",        ahrs.getLastSensorTimestamp());
        
        /* Omnimount Yaw Axis Information                                           */
        /* For more info, see http://navx-mxp.kauailabs.com/installation/omnimount  */
        AHRS.BoardYawAxis yaw_axis = ahrs.getBoardYawAxis();
        SmartDashboard.putString(   "YawAxisDirection",     yaw_axis.up ? "Up" : "Down" );
        SmartDashboard.putNumber(   "YawAxis",              yaw_axis.board_axis.getValue() );
        
        /* Sensor Board Information                                                 */
        SmartDashboard.putString(   "FirmwareVersion",      ahrs.getFirmwareVersion());
        
        /* Quaternion Data                                                          */
        /* Quaternions are fascinating, and are the most compact representation of  */
        /* orientation data.  All of the Yaw, Pitch and Roll Values can be derived  */
        /* from the Quaternions.  If interested in motion processing, knowledge of  */
        /* Quaternions is highly recommended.                                       */
        SmartDashboard.putNumber(   "QuaternionW",          ahrs.getQuaternionW());
        SmartDashboard.putNumber(   "QuaternionX",          ahrs.getQuaternionX());
        SmartDashboard.putNumber(   "QuaternionY",          ahrs.getQuaternionY());
        SmartDashboard.putNumber(   "QuaternionZ",          ahrs.getQuaternionZ());
        
        /* Connectivity Debugging Support                                           */
        SmartDashboard.putNumber(   "IMU_Byte_Count",       ahrs.getByteCount());
        SmartDashboard.putNumber(   "IMU_Update_Count",     ahrs.getUpdateCount());
        Timer.delay(0.005);
    }
    
    public void stop() {
    	robotDrive.drive(0, 0);
    }
    
    public void takeJoystickInputs(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(1) * joystick.getRawAxis(3)*-1;
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = joystick.getRawAxis(3) * Math.pow(joystick.getRawAxis(2),3);
    	rotateValue *= joystick.getRawAxis(3) > 0 ? 1 : -1;
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    
    public void takeJoystickInputs2(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(1) * -1*(joystick.getRawAxis(3)-1)/2;
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = (joystick.getRawAxis(3)+1)/2 * Math.pow(joystick.getRawAxis(2),3);
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }
    
    public void takeJoystickInputs3(GenericHID joystick) {
    	//update the moveValue so that the y-axis is squared input and then multiplied by the "governor" to control max speed & direction
    	moveValue = joystick.getRawAxis(2)+ joystick.getRawAxis(3)*-1;
    	//update the rotateValue so that the z-axis is cubed and then multiplied by the "governor" to control rotate speed & direction
    	rotateValue = joystick.getRawAxis(0);
    	rotateValue = Math.min(rotateValue, .7);
    	rotateValue = Math.max(rotateValue, -.7);
    	
    	//use basic arcade drive for leftMotor1 and rightMotor1, then update the remaining motors
    	robotDrive.arcadeDrive(moveValue, rotateValue, true);
    	//the remaining left & right motors need to mimic the base motors
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    }

}

