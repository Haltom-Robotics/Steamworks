// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.Steamworks.commands;
import org.usfirst.frc6133.Steamworks.Robot;
import org.usfirst.frc6133.Steamworks.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends Command {


	private boolean blueAlliance = false;
	private int lift = 0;
	private double t;
	private boolean sonar_distance = false;
	private boolean rotate_done = false;
	private boolean done = false;
	private double clock = 1;
	private final double Kp = 0.015;
	private int SONAR_DISTANCE = 89;
	private final int SONAR_DISTANCE_BLUE = 89;
	private final int SONAR_DISTANCE_RED = 89;
	//private final double dKp = 0.374;
	private double raw_volts;
    public AutonomousCommand() {
    	requires(Robot.drivetrain);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	done = false;

    	if (RobotMap.allianceChooser.getSelected() == "blue") {
        	blueAlliance = true;
        	SONAR_DISTANCE = SONAR_DISTANCE_BLUE;
    	} else
    	{
    		SONAR_DISTANCE = SONAR_DISTANCE_RED;
    	}
        if (RobotMap.liftChooser.getSelected() == "left") {
        	lift = 1;
        	//System.out.println("Start Sonar: " + RobotMap.sonar.getVoltage());
        }
        else if (RobotMap.liftChooser.getSelected() == "mid")
        	lift = 2;
        else if (RobotMap.liftChooser.getSelected() == "right")
        	lift = 3;
        else if (RobotMap.liftChooser.getSelected() == "none")
        	lift = 4;
        else if (RobotMap.liftChooser.getSelected() == "fuel")
        	lift = 5;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	t = 15 - Timer.getMatchTime();
    	//MIDDLE LIFT
    	if (lift == 2)
    	{
    		double angle = RobotMap.gyro.getAngle();
    		if (t < 0.05)
    			RobotMap.drivetrainRobotDrive.drive(-.35, -angle*Kp);
    		else if (t < .75)
    			RobotMap.drivetrainRobotDrive.drive(-.27, -angle*Kp);
    		else if (t < 8.1)
    			RobotMap.drivetrainRobotDrive.drive(-.2, -angle*Kp);
    		else {    		
    			RobotMap.drivetrainRobotDrive.drive(0, 0);
    			done = true;
    		}
    		Timer.delay(0.004);
    	}
    	//LEFT LIFT
    	else if (lift == 1)
    	{
    		if (!sonar_distance) {
    			raw_volts = RobotMap.sonar.getVoltage() * 512 / 5;
    			double angle = RobotMap.gyro.getAngle();
    			if (raw_volts < SONAR_DISTANCE) {
    				double move = (100 - raw_volts) / -100.0;
    				move = Math.max(move,-.35);
    				move = Math.min(move, -0.15);
    				RobotMap.drivetrainRobotDrive.drive(move,-angle*Kp);
    				System.out.println(raw_volts);
    				Timer.delay(0.049);
    			} else {
    				sonar_distance = true;
    				clock = t;
    				System.out.println("Time: " + t + "\nSonar: " + raw_volts);
    			}
    			
    		} else if (!rotate_done){
    			double angle = RobotMap.gyro.getAngle();
    			if (t < clock + 0.1) {
    				RobotMap.drivetrainRobotDrive.drive(0, (45-angle)*0.02);
    				Timer.delay(0.004);
    				//System.out.println("Turning.");
    			}
    			else {
    				rotate_done = true;
    				clock = t;
    				//System.out.println("Done turning");
    				
    			}
    		} else {
    			double angle = RobotMap.gyro.getAngle();
    			if (t < clock + 7) {
    				RobotMap.drivetrainRobotDrive.drive(-.33, (45-angle)*0.02);
    				//System.out.println("Forward.");
    			} else {
    				RobotMap.drivetrainRobotDrive.drive(0, 0);
    				//System.out.println("Finished!!!");
    			}
    			Timer.delay(0.004);
    		}
    		
    	}
    	//Right
    	else if (lift == 3) {
    		if (!sonar_distance) {
    			raw_volts = RobotMap.sonar.getVoltage() * 512 / 5;
    			double angle = RobotMap.gyro.getAngle();
    			if (raw_volts < SONAR_DISTANCE) {
    				double move = (100 - raw_volts) / -100.0;
    				move = Math.max(move,-.35);
    				move = Math.min(move, -0.15);
    				RobotMap.drivetrainRobotDrive.drive(move,-angle*Kp);
    				//System.out.println(raw_volts);
    				Timer.delay(0.049);
    			} else {
    				sonar_distance = true;
    				clock = t;
    				System.out.println("Time: " + t + "\nSonar: " + raw_volts);
    			}
    			
    		} else if (!rotate_done){
    			double angle = RobotMap.gyro.getAngle();
    			if (t > clock + 0.1) {
    				rotate_done = true;
    				clock = t;
    				//System.out.println("Done turning");
    			}
    			else {
    				RobotMap.drivetrainRobotDrive.drive(0, (-45-angle)*0.02);
    				Timer.delay(0.004);
    				//System.out.println("Turning.");
    			}
    		} else {
    			double angle = RobotMap.gyro.getAngle();
    			if (t < clock + 7) {
    				RobotMap.drivetrainRobotDrive.drive(-.33, (-45-angle)*0.02);
    				//System.out.println("Forward.");
    			} else {
    				RobotMap.drivetrainRobotDrive.drive(0, 0);
    				//System.out.println("Finished!!!");
    			}
    			Timer.delay(0.004);
    		}
    	}
    	//NO LIFT - DRIVE STRAIGHT
    	else if (lift == 4)
    	{
    		double angle = RobotMap.gyro.getAngle();
    		if (t < 0.25)
    			RobotMap.drivetrainRobotDrive.drive(-.1, -angle*Kp);
    		else if (t < .75)
    			RobotMap.drivetrainRobotDrive.drive(-.2, -angle*Kp);
    		else if (t < 5.1)
    			RobotMap.drivetrainRobotDrive.drive(-.3, -angle*Kp);
    		else {    		
    			RobotMap.drivetrainRobotDrive.drive(0, 0);
    			done = true;
    		}
    		Timer.delay(0.004);
    	}
    	//NO LIFT - DROP FUEL
    	else if (lift == 5) {
    		//Due to symmetry, we need to operate differently for Red vs Blue
    		//Are we the Blue Alliance?
    		if (blueAlliance) {
    			
    		} 
    		//We are the Red Alliance
    		else {
    			
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
